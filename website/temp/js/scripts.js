function initContactFormListener(){$("#contact-form .btn-site").on("click",function(){$("#contact-form").submit()}),$("#contact-form").submit(function(e){e.preventDefault(),console.log("Form submitted listener called");var s=$("#contact-form").find("input, textarea, select"),t={};s.each(function(){this.name&&("checkbox"==this.type||"radio"==this.type?this.checked&&(t[this.name]=this.value):t[this.name]=this.value)}),console.log("formValues : "+JSON.stringify(t)),$.ajax({url:"assets/php/handleajaxform.php",method:"POST",data:t,success:function(e){if(console.log("AJAX post result result : "+JSON.stringify(e)),$("div[data-error-id]").text(""),$("#contact-form input, #contact-form textarea").removeClass("form-error"),$("#send-result").text(""),Object.keys(e.errors).length>0)for(var s in e.errors)console.log("error in "+s+": "+e.errors[s]),$('div[data-error-id="'+s+'"]').text(e.errors[s]).hide().slideDown(),$('*[name="'+s+'"]').addClass("form-error"),$('*[name="'+s+'"]').animateCss("shake");else console.log("All validation passed succesfully!"),$("#send-result").text("Thank you. Your message has been sent."),$("#send-result").removeClass("alert-danger").addClass("alert-success"),$("#send-result").show().animateCss("bounceIn",function(){$("input").val(""),$("textarea").val(""),$("#send-result").delay(5e3).slideUp()})},error:function(){$("#send-result").removeClass("alert-success"),$("#send-result").addClass("alert-danger"),$("#send-result").text("Sorry... Your message could not have been delivered."),$("#send-result").slideDown()}})})}
function initContactMap(){var o=[{featureType:"all",elementType:"all",stylers:[{saturation:-100},{gamma:.5}]}],t=new google.maps.Map(document.getElementById("contact-map"),{center:myPosition,scrollwheel:!1,streetViewControl:!0,streetViewControl:{position:google.maps.ControlPosition.LEFT_BOTTOM},mapTypeControl:!0,mapTypeControlOptions:{position:google.maps.ControlPosition.BOTTOM_LEFT},zoomControl:!0,zoomControlOptions:{position:google.maps.ControlPosition.LEFT_CENTER},styles:o,zoom:14});myMap=t;new google.maps.Marker({map:t,position:myPosition,title:"Kamenictv√≠ Erben",icon:{url:"assets/images/IE_logo_rounded_pointer.png",scaledSize:new google.maps.Size(150,150)}});myMap.panBy(0,-$("nav.navbar").height())}var myMap,myPosition={lat:50.048822,lng:15.200242};
$(function(n){$(".loader-wrapper").hide();setInterval(function(){$(".btn-down").animateCss("bounce")},3e3);$.fn.extend({animateCss:function(n,e){return this.addClass("animated "+n).one("webkitAnimationEnd mozAnimationEnd MSAnimationEnd oanimationend animationend",function(){$(this).removeClass("animated "+n),$.isFunction(e)&&e()}),this}}),initCarousels=function(){console.log("carousels initialized");for(var n=[{carousel:"#main-carousel",interval:7e3,pause:"none"},{carousel:"#about-carousel",interval:5e3,pause:"none"},{carousel:"#carouselTombstones",interval:3e3,pause:"none"},{carousel:"#carouselGarden",interval:3e3,pause:"none"},{carousel:"#carouselRestorations",interval:3e3,pause:"none"},{carousel:"#CarouselMonuments",interval:3e3,pause:"none"}],e=0;e<n.length-1;e++)$(n[e].carousel).carousel({interval:n[e].interval})},n.initCarousels=initCarousels}(window));
!function(t,a){var n=["cz","en"],e=function(t){return new e.init(t)};e.prototype={getKeyVal:function(t){return self=this,function(){t=t.trim();for(var a,n=0;n<=e.data.length-1;n++){if(e.data[n].datatag===t)return a=e.data[n][self.activeLang];a=""}return a}()},switchLang:function(t){self=this;for(var n=a("[data-lang]").length,e=0;e<=n-1;e++){var o=a(a("[data-lang]")[e]).data("lang");value=LNG$(t).getKeyVal(o),""!==value.trim()&&(value.search("<ph>")>-1?(value=value.substr(4,value.length),a(a("[data-lang]")[e]).attr("placeholder",value)):a(a("[data-lang]")[e]).text(LNG$(t).getKeyVal(o)).animateCss("pulse"))}}},e.init=function(t){this.activeLang=t||n[0]},e.init.prototype=e.prototype,t.Lang=t.LNG$=e,function(t,n){a.getJSON(t,function(){console.log("--- success ---")}).done(function(t){console.log("--- second success ---"),n(t)}).fail(function(t,a,n){console.log("--- error ---"),console.log(t)}).always(function(){})}("./assets/data/lang.json",function(t){e.data=t;var n=a(".lang-switcher a").text().trim();LNG$(n).switchLang(n)})}(window,jQuery);
$(function(n){function e(){$("#mainNavbar").on("show.bs.collapse",function(){$(".hamburger__menu-icon").addClass("hamburger__menu-icon--close-x")}),$("#mainNavbar").on("hide.bs.collapse",function(){$(".hamburger__menu-icon").removeClass("hamburger__menu-icon--close-x")}),$(".nav-link").on("click",function(n){n.preventDefault();var e=this.href.trim().toLowerCase(),i=this.pathname.trim().toLowerCase();$(this).siblings(".nav-link").removeClass("active"),$(this).addClass("active"),void 0!==s&&null!==s&&(s=s.destroy(!0)),$("#mainNavbar").collapse("hide"),$(".loader-wrapper").show(),$("#ajax-container").animateCss("fadeOutDown",function(){var n=this;$("body,html").stop().animate({scrollTop:0},"50"),$("#ajax-content").load(e+" #ajax-container",function(e,h){"success"===h?($(n).remove(),$("#ajax-content").hide(),$(".loader-wrapper").hide(),$("#ajax-content").show(),$("#ajax-content").animateCss("fadeInUp"),a(),t(),o(!0),i.search("realisations.html")>-1?initCommisionsGallery():i.search("contact.html")>-1?(initContactMap(),initContactFormListener()):i.search("index.html")>-1?(initCarousels(),r(),m||(s=new ScrollMagic.Controller({globalSceneOptions:{triggerHook:"onEnter",duration:"100%"}}),c=new ScrollMagic.Scene({triggerElement:"#parallax1"}).setTween("#parallax1 > div",{y:"50%",ease:Linear.easeNone}).addTo(s))):i.search("about.html")>-1?(initCarousels(),m||(s=new ScrollMagic.Controller({globalSceneOptions:{triggerHook:"onEnter",duration:"100%"}}),l=new ScrollMagic.Scene({triggerElement:"#parallax2"}).setTween("#parallax2 > div",{y:"50%",ease:Linear.easeNone}).addTo(s))):i.search("pricing.html")>-1&&initPricingGallery()):"error"===h&&($(".loader-wrapper").hide(),console.log("Error loading from server..."))})})})}function a(){$(".btn-map").on("click",function(n){n.preventDefault();var e=$(this);if(window.addEventListener("orientationchange",function(){e.children().hasClass("fa-expand")&&(window.matchMedia("(orientation: landscape)").matches&&window.innerWidth<767?$("#contact-map").animate({height:"75vh"},500,function(){google.maps.event.trigger(myMap,"resize"),myMap.setCenter(myPosition),myMap.panBy(0,-$("nav.navbar").height())}):$("#contact-map").animate({height:"50vh"},500,function(){google.maps.event.trigger(myMap,"resize"),myMap.setCenter(myPosition),myMap.panBy(0,-$("nav.navbar").height())}))},!1),e.children().hasClass("fa-expand"))return e.children().removeClass("fa-expand").addClass("fa-compress"),void $("#contact-map").animate({height:"100vh"},500,function(){google.maps.event.trigger(myMap,"resize"),myMap.setCenter(myPosition),myMap.panBy(0,-$("nav.navbar").height())});e.children().hasClass("fa-compress")&&(e.children().removeClass("fa-compress").addClass("fa-expand"),window.matchMedia("(orientation: landscape)").matches&&window.innerWidth<767?$("#contact-map").animate({height:"75vh"},500,function(){google.maps.event.trigger(myMap,"resize"),myMap.setCenter(myPosition),myMap.panBy(0,-$("nav.navbar").height())}):$("#contact-map").animate({height:"50vh"},500,function(){google.maps.event.trigger(myMap,"resize"),myMap.setCenter(myPosition),myMap.panBy(0,-$("nav.navbar").height())}))})}function t(){var n=0;$(window).on("scroll",function(){var e=$(window).height(),a=$(window).scrollTop();n=e/5,a<0&&(a=0),(e-n)/a>1?$(".btn-move-up").is(":visible")&&$(".btn-move-up").animateCss("bounceOut",function(){$(".btn-move-up").hide(),$(".btn-down").show().animateCss("bounceIn")}):$(".btn-move-up").is(":visible")||$(".btn-down").animateCss("bounceOut",function(){$(".btn-down").hide(),$(".btn-move-up").show(),$(".btn-move-up").animateCss("bounceIn")})}),$(".btn-move-up").on("click",function(){$("body,html").stop().animate({scrollTop:0},"700","swing")}),$(".btn-down").on("click",function(n){console.log(n),n.preventDefault();var e=n.currentTarget.hash,a=$(e).offset().top;$("body,html").stop().animate({scrollTop:a},"700","swing")})}function o(n){var n=n||!1,e=$(".lang-switcher>span").text().trim();n&&LNG$(e).switchLang(e),$(".lang-switcher>span").on("click",function(){"cz"===e?(e="en",$(".lang-switcher>span").text(e),LNG$(e).switchLang(e)):"en"===e&&(e="cz",$(".lang-switcher>span").text(e),LNG$(e).switchLang(e)),$(this).animateCss("bounceIn")})}function r(){$(".btn-site").on("click",function(n){n.preventDefault;var e=$(this).data("link").trim(),i=window.location.href;i.search("index.html")>=0?i=i.replace("index.html","realisations.html"):i+="realisations.html",$("#ajax-container").animateCss("fadeOutDown",function(){$("#ajax-content").hide(),$("#ajax-content").load(i+" #ajax-container",function(){$(".navbar-nav>.nav-link").removeClass("active"),$(".navbar-nav>.nav-link[href='realisations.html']").addClass("active"),$("#ajax-content").show(),$("#ajax-content").animateCss("fadeInUp"),a(),t(),o(),initCommisionsGallery(function(){$(".filter-item").each(function(n){if($(this).text().toLowerCase().trim()===e)return void $(this).trigger("click")})})})})})}var s,c,l;n.mySite={};var m=function(){var n=["android","webos","iphone","ipad","blackberry"];for(i in n)if(navigator.userAgent.toLowerCase().search(n[i])>-1&&void 0!==window.orientation)return!0;return!1}();if(n.mySite.isMobileFlag=m,m===!0&&$("body").addClass("isMobile"),!m)var s=new ScrollMagic.Controller({globalSceneOptions:{triggerHook:"onEnter",duration:"100%"}}),c=new ScrollMagic.Scene({triggerElement:"#parallax1"}).setTween("#parallax1 > div",{y:"50%",ease:Linear.easeNone}).addTo(s);r(),e(),a(),t(),o(),n.mySite.navMenuInit=e,n.mySite.placeContactListeners=a,n.mySite.placeButtonMoveUpListener=t,n.mySite.placeLangSwitchListener=o}(window));
function initCommisionsGallery(e){var e=e||function(){},i=0;$(".grid-item>.img-result-wrapper").hide(),$(".grid-item>.img-loader-wrapper").show(),$(".grid>.grid-item").addClass("hover-off"),$("#portfolios").imagesLoaded().always(function(i){console.log("all images of 'Commisions menu' loaded"),instantiateIsotopeGallery(".grid",{itemSelector:".grid-item",stagger:30}),buildImgCategories("#filter-portfolio","#portfolio-gallery .grid-item"),placeFilterListeners(".grid"),$(".grid-item>.img-result-wrapper").fadeOut(1e3),$(".img-loader>.img-loader-text").text("images loaded"),$(".img-loader-bar").css("background-color","green"),$(".img-loader").delay(3e3).slideUp(1e3),$(".grid>.grid-item").removeClass("hover-off"),e()}).done(function(){console.log("all images of 'Commisions menu' successfully loaded")}).fail(function(){console.log(i+" of 'Commisions menu' images have broken links. Check your image paths."),$(".img-loader").delay(3e3).slideUp(1e3)}).progress(function(e,t){t.isLoaded?($(t.img).siblings(".img-loader-wrapper").hide(),$(t.img).siblings(".img-result-wrapper").animateCss("bounceIn").show(),$(".img-loader-bar").width(e.progressedCount/e.images.length*100+"%")):(i++,$(t.img).parent().remove())})}function initPricingGallery(){var e=0;$(".grid-pricing>.grid-item-pricing").addClass("hover-off"),$("#pricing").imagesLoaded().always(function(e){console.log("all images of 'Pricing menu' loaded"),instantiateIsotopeGallery(".grid-pricing",{itemSelector:".grid-item-pricing",stagger:30}),buildImgCategories("#filter-pricelist","#pricing-gallery .grid-item-pricing"),placeFilterListeners(".grid-pricing"),$(".grid-pricing>.grid-item-pricing").removeClass("hover-off")}).done(function(){console.log("All images of 'Pricing menu' successfully loaded")}).fail(function(){console.log(e+" of 'Pricing menu' images have broken links. Check your image paths.")}).progress(function(i,t){t.isLoaded||(e++,$(t.img).parent().remove())})}function instantiateIsotopeGallery(e,i){$(e).isotope(i)}function buildImgCategories(e,i){var t=$(i),r=$(e),o={};r.children().remove(),t.each(function(){var e=this,i=$(this).data("portfolio-tags");i&&i.split(",").forEach(function(i){i=i.trim(),null==o[i]&&(o[i]=[]),o[i].push(e)})}),r.addClass("filter-wrapper"),$("<li/>").appendTo(r),$("<a/>",{text:"V≈°e",class:"filter-item selected",click:function(){$(this).addClass("selected").parent().siblings().children().removeClass("selected")}}).appendTo(r.children().eq(0)).attr("data-lang","V≈°e"),$("<li><a class='filter-item filter-portfolio-divider'>&nbsp;</a></li>").appendTo(r),$.each(o,function(e){$("<li/>").appendTo(r),$("<a/>",{text:e,class:"filter-item",click:function(){$(this).addClass("selected").parent().siblings().children().removeClass("selected")}}).appendTo(r.children().last()).attr("data-lang",e)})}function placeFilterListeners(e){$(".filter-wrapper").on("click",".filter-item",function(){var i=$(this).data("lang");i===$($(".filter-item")[0]).data("lang")?$(e).isotope({filter:function(){return!0}}):$(e).isotope({filter:function(){return tagText=$(this).data("portfolioTags"),found=tagText.search(i),found>-1}})}),$(e+" .grid-item").on("click",function(i){i.preventDefault(),$(this).hasClass("grid-item-selected")?$(this).removeClass("grid-item-selected"):($(e+" .grid-item").removeClass("grid-item-selected"),$(this).addClass("grid-item-selected")),$(e).isotope("layout")})}
//# sourceMappingURL=data:application/json;charset=utf8;base64,
